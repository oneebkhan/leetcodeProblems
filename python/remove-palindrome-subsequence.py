# 1332. Remove Palindromic Subsequences

# Easy

# You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

# Return the minimum number of steps to make the given string empty.

# A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

# A string is called palindrome if is one that reads the same backward as well as forward.

# Example 1:
# Input: s = "ababa"
# Output: 1
# Explanation: s is already a palindrome, so its entirety can be removed in a single step.

# Example 2:
# Input: s = "abb"
# Output: 2
# Explanation: "abb" -> "bb" -> "".
# Remove palindromic subsequence "a" then "bb".

# Example 3:
# Input: s = "baabb"
# Output: 2
# Explanation: "baabb" -> "b" -> "".
# Remove palindromic subsequence "baab" then "b".


# Constraints:

# 1 <= s.length <= 1000
# s[i] is either 'a' or 'b'.

class Solution:
    def removePalindromeSub(self, s: str) -> int:
        steps: int = 0
        temp: str = s
        isEven: bool = len(temp) % 2 == 0
        while len(temp) > 1:
            count: int = 0
            stack: list = []
            steps = steps + 1
            for i in range(len(temp)):
                if len(stack) > 0 and i + count < len(temp) - 1:
                    if isEven and temp[i + count] == stack[len(stack) - 1]:
                        temp = temp[:i] + temp[i + 1:]
                    elif (i + count + 1) < len(temp) - 1 and not isEven and temp[i + count + 1] == stack[len(stack) - 1]:
                        continue
                else:
                    if count == len(temp):
                        return len(temp)

                    if i == len(temp) - 1:
                        count = count + 1
                    print(temp[i+count])
                    stack.append(temp[i+count])
        return steps


sol = Solution()
sol.removePalindromeSub()
